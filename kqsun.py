import json
import asyncio
import websockets
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# C·∫•u h√¨nh bot Telegram
BOT_TOKEN = "8053826988:AAFlCP-OPKJdr9XegaryaRkX8gWmnEknwLg"  # Thay b·∫±ng token c·ªßa bot
CHAT_ID = "-1002596735298"      # Thay b·∫±ng chat ID c·ªßa nh√≥m
ADMIN_IDS = [123456789]       # Thay b·∫±ng danh s√°ch ID c·ªßa admin

# URL WebSocket
WS_URL = "ws://163.61.110.10:8000/game_sunwin/ws?id=duy914c&key=dduy1514nsadfl"

# Tr·∫°ng th√°i bot
bot_running = False

# Kh·ªüi t·∫°o bot Telegram
bot = Bot(token=BOT_TOKEN)

# H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m Telegram
async def send_message_to_group(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        print(f"ƒê√£ g·ª≠i tin nh·∫Øn: {message}")
    except TelegramError as e:
        print(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}")

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu WebSocket
async def process_websocket_message(message):
    try:
        # Parse d·ªØ li·ªáu JSON
        data = json.loads(message)
        required_fields = ["Phien", "Xuc_xac_1", "Xuc_xac_2", "Xuc_xac_3", "Tong", "Ket_qua"]
        if not all(field in data for field in required_fields):
            print("L·ªói: Thi·∫øu tr∆∞·ªùng d·ªØ li·ªáu JSON")
            return

        phien = data["Phien"]
        xuc_xac_1 = data["Xuc_xac_1"]
        xuc_xac_2 = data["Xuc_xac_2"]
        xuc_xac_3 = data["Xuc_xac_3"]
        tong = data["Tong"]
        ket_qua = data["Ket_qua"]

        # Chuy·ªÉn s·ªë th√†nh emoji
        num_to_emoji = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 
            6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü",
            11: "1Ô∏è‚É£1Ô∏è‚É£", 12: "1Ô∏è‚É£2Ô∏è‚É£", 13: "1Ô∏è‚É£3Ô∏è‚É£", 14: "1Ô∏è‚É£4Ô∏è‚É£", 
            15: "1Ô∏è‚É£5Ô∏è‚É£", 16: "1Ô∏è‚É£6Ô∏è‚É£", 17: "1Ô∏è‚É£7Ô∏è‚É£", 18: "1Ô∏è‚É£8Ô∏è‚É£"
        }

        # ƒê·ªãnh d·∫°ng tin nh·∫Øn
        msg = (
            f"K·∫øt qu·∫£ m·ªõi nh·∫•t sun.win\n"
            f"=====================\n"
            f"üé≤ Phi√™n: #{phien}\n"
            f"X√∫c x·∫Øc: {num_to_emoji.get(xuc_xac_1, xuc_xac_1)}‚Ä¢{num_to_emoji.get(xuc_xac_2, xuc_xac_2)}‚Ä¢{num_to_emoji.get(xuc_xac_3, xuc_xac_3)}\n"
            f"T·ªïng: {num_to_emoji.get(tong, str(tong))}\n"
            f"K·∫øt qu·∫£: {ket_qua}"
        )

        # G·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m
        await send_message_to_group(msg)
    except json.JSONDecodeError:
        print("L·ªói: D·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá")
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

# H√†m ch·∫°y WebSocket v·ªõi reconnect
async def websocket_client():
    global bot_running
    while True:
        if not bot_running:
            await asyncio.sleep(1)
            continue
        try:
            async with websockets.connect(WS_URL, ping_interval=20, ping_timeout=10) as ws:
                print("ƒê√£ k·∫øt n·ªëi ƒë·∫øn WebSocket")
                while bot_running:
                    try:
                        message = await asyncio.wait_for(ws.recv(), timeout=60)
                        await process_websocket_message(message)
                    except asyncio.TimeoutError:
                        print("WebSocket timeout, ti·∫øp t·ª•c l·∫Øng nghe...")
                    except websockets.ConnectionClosed:
                        print("K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng, th·ª≠ k·∫øt n·ªëi l·∫°i...")
                        break
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi WebSocket: {e}")
            if bot_running:
                print("Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y...")
                await asyncio.sleep(5)

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return  # Kh√¥ng ph·∫£n h·ªìi n·∫øu kh√¥ng ph·∫£i admin

    # T·∫°o menu v·ªõi 2 n√∫t
    keyboard = [
        [
            InlineKeyboardButton("B·∫≠t bot", callback_data="start_bot"),
            InlineKeyboardButton("T·∫Øt bot", callback_data="stop_bot")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("Ch·ªçn h√†nh ƒë·ªông:", reply_markup=reply_markup)

# H√†m x·ª≠ l√Ω n√∫t inline
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y!")
        return

    await query.answer()

    if query.data == "start_bot":
        if bot_running:
            await query.message.reply_text("Bot ƒë√£ ƒëang ch·∫°y!")
        else:
            bot_running = True
            await query.message.reply_text("Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t!")
    
    elif query.data == "stop_bot":
        if not bot_running:
            await query.message.reply_text("Bot ƒë√£ ƒëang t·∫Øt!")
        else:
            bot_running = False
            await query.message.reply_text("Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt!")

# H√†m ch√≠nh
async def main():
    # T·∫°o application
    application = Application.builder().token(BOT_TOKEN).build()

    # Th√™m handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # Ch·∫°y WebSocket client trong background
    asyncio.create_task(websocket_client())

    # Ch·∫°y bot
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
