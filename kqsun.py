import json
import websocket
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
import threading

# C·∫•u h√¨nh bot Telegram
BOT_TOKEN = "8053826988:AAFlCP-OPKJdr9XegaryaRkX8gWmnEknwLg"  # Thay b·∫±ng token c·ªßa bot
CHAT_ID = "-1002596735298"      # Thay b·∫±ng chat ID c·ªßa nh√≥m
ADMIN_IDS = [6020088518]  # Thay b·∫±ng danh s√°ch ID c·ªßa admin

# URL WebSocket
WS_URL = "ws://163.61.110.10:8000/game_sunwin/ws?id=duy914c&key=dduy1514nsadfl"

# Tr·∫°ng th√°i bot
bot_running = False
ws_thread = None
ws_app = None

# Kh·ªüi t·∫°o bot Telegram
bot = Bot(token=BOT_TOKEN)

# H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m Telegram
async def send_message_to_group(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        print(f"ƒê√£ g·ª≠i tin nh·∫Øn: {message}")
    except Exception as e:
        print(f"L·ªói khi g·ª≠i tin nh·∫Øn: {e}")

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu WebSocket
def on_message(ws, message):
    if not bot_running:
        return
    try:
        # Parse d·ªØ li·ªáu JSON
        data = json.loads(message)
        phien = data.get("Phien")
        xuc_xac_1 = data.get("Xuc_xac_1")
        xuc_xac_2 = data.get("Xuc_xac_2")
        xuc_xac_3 = data.get("Xuc_xac_3")
        tong = data.get("Tong")
        ket_qua = data.get("Ket_qua")

        # Chuy·ªÉn s·ªë th√†nh emoji
        num_to_emoji = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 
            6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü",
            11: "1Ô∏è‚É£1Ô∏è‚É£", 12: "1Ô∏è‚É£2Ô∏è‚É£", 13: "1Ô∏è‚É£3Ô∏è‚É£", 14: "1Ô∏è‚É£4Ô∏è‚É£", 
            15: "1Ô∏è‚É£5Ô∏è‚É£", 16: "1Ô∏è‚É£6Ô∏è‚É£", 17: "1Ô∏è‚É£7Ô∏è‚É£", 18: "1Ô∏è‚É£8Ô∏è‚É£"
        }

        # ƒê·ªãnh d·∫°ng tin nh·∫Øn theo y√™u c·∫ßu m·ªõi
        msg = (
            f"K·∫øt qu·∫£ m·ªõi nh·∫•t sun.win\n"
            f"=====================\n"
            f"üé≤ Phi√™n: #{phien}\n"
            f"X√∫c x·∫Øc: {num_to_emoji.get(xuc_xac_1, xuc_xac_1)}‚Ä¢{num_to_emoji.get(xuc_xac_2, xuc_xac_2)}‚Ä¢{num_to_emoji.get(xuc_xac_3, xuc_xac_3)}\n"
            f"T·ªïng: {num_to_emoji.get(tong, str(tong))}\n"
            f"K·∫øt qu·∫£: {ket_qua}"
        )

        # G·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m
        asyncio.run_coroutine_threadsafe(send_message_to_group(msg), asyncio.get_event_loop())
    except json.JSONDecodeError:
        print("L·ªói: D·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá")
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

# H√†m x·ª≠ l√Ω l·ªói WebSocket
def on_error(ws, error):
    print(f"L·ªói WebSocket: {error}")

# H√†m khi k·∫øt n·ªëi WebSocket th√†nh c√¥ng
def on_open(ws):
    print("ƒê√£ k·∫øt n·ªëi ƒë·∫øn WebSocket")

# H√†m khi ƒë√≥ng k·∫øt n·ªëi WebSocket
def on_close(ws, close_status_code, close_msg):
    global bot_running
    print("K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng")
    bot_running = False

# H√†m ch·∫°y WebSocket
def run_websocket():
    global ws_app
    ws_app = websocket.WebSocketApp(
        WS_URL,
        on_message=on_message,
        on_error=on_error,
        on_open=on_open,
        on_close=on_close
    )
    ws_app.run_forever()

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return  # Kh√¥ng ph·∫£n h·ªìi n·∫øu kh√¥ng ph·∫£i admin

    # T·∫°o menu v·ªõi 2 n√∫t
    keyboard = [
        [
            InlineKeyboardButton("B·∫≠t bot", callback_data="start_bot"),
            InlineKeyboardButton("T·∫Øt bot", callback_data="stop_bot")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("Ch·ªçn h√†nh ƒë·ªông:", reply_markup=reply_markup)

# H√†m x·ª≠ l√Ω n√∫t inline
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running, ws_thread, ws_app
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y!")
        return

    await query.answer()

    if query.data == "start_bot":
        if bot_running:
            await query.message.reply_text("Bot ƒë√£ ƒëang ch·∫°y!")
        else:
            bot_running = True
            ws_thread = threading.Thread(target=run_websocket)
            ws_thread.start()
            await query.message.reply_text("Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t!")
    
    elif query.data == "stop_bot":
        if not bot_running:
            await query.message.reply_text("Bot ƒë√£ ƒëang t·∫Øt!")
        else:
            bot_running = False
            if ws_app:
                ws_app.close()
            if ws_thread:
                ws_thread.join()
            await query.message.reply_text("Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt!")

# H√†m ch√≠nh
async def main():
    # T·∫°o application
    application = Application.builder().token(BOT_TOKEN).build()

    # Th√™m handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # Ch·∫°y bot
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())